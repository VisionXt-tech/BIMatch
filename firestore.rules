rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }
    
    // Users collection - enhanced security
    match /users/{userId} {
      allow read: if isOwner(userId);
      
      // Allow admin to read all user profiles
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow limited read access for marketplace (no sensitive data)
      allow read: if isAuthenticated() && 
        request.auth.uid != userId &&
        resource.data.role == 'professional';
      
      // Allow marketplace queries for professionals
      allow list: if isAuthenticated();
        
      allow create: if isOwner(userId) && 
        isValidEmail(request.resource.data.email) &&
        request.resource.data.role in ['professional', 'company', 'admin'] &&
        // Professional validation
        ((request.resource.data.role == 'professional' &&
          isValidString(request.resource.data.firstName, 2, 50) &&
          isValidString(request.resource.data.lastName, 2, 50)) ||
        // Company validation  
         (request.resource.data.role == 'company' &&
          isValidString(request.resource.data.companyName, 2, 100)) ||
        // Admin validation (can be either)
         (request.resource.data.role == 'admin'));
        
      allow update: if isOwner(userId) || hasRole('admin');
         
      allow delete: if hasRole('admin');
    }
    
    // Projects collection - enhanced validation  
    match /projects/{projectId} {
      allow read: if true; // Public read for SEO and metadata
      allow list: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.companyId == request.auth.uid;
        
      allow update: if isAuthenticated() && 
        resource.data.companyId == request.auth.uid &&
        // Prevent changing core fields
        request.resource.data.companyId == resource.data.companyId;
        
      allow delete: if isAuthenticated() && 
        resource.data.companyId == request.auth.uid;
    }
    
    // Project Applications collection - strict access control
    match /projectApplications/{applicationId} {
      allow read: if isAuthenticated() && 
        (resource.data.professionalId == request.auth.uid || 
         resource.data.companyId == request.auth.uid);
         
      allow list: if isAuthenticated();
         
      allow create: if isAuthenticated() && 
        request.resource.data.professionalId == request.auth.uid;
        
      allow update: if isAuthenticated() && 
        (resource.data.professionalId == request.auth.uid || 
         resource.data.companyId == request.auth.uid);
        
      allow delete: if isAuthenticated() && 
        resource.data.companyId == request.auth.uid;
    }
    
    // Notifications collection - enhanced security
    match /notifications/{notificationId} {
      // Read: Only notification owner can read their notifications
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;

      // List: Only for owned notifications with proper filtering
      allow list: if isAuthenticated() &&
        request.auth.uid != null;

      // Update: Only owner can mark as read, no other updates allowed
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        // Only allow updating isRead field and updatedAt
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'updatedAt']) &&
        // Prevent changing critical fields
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.type == resource.data.type &&
        request.resource.data.message == resource.data.message;

      // Create: Allow authenticated users to create notifications with validation
      allow create: if isAuthenticated() &&
        // Validate notification structure has required fields
        request.resource.data.keys().hasAll(['userId', 'type', 'title', 'message', 'isRead', 'createdAt']) &&
        // Validate timestamp is server timestamp
        request.resource.data.createdAt == request.time &&
        // Validate notification types from constants
        request.resource.data.type in [
          'APPLICATION_STATUS_UPDATED',
          'NEW_PROJECT_MATCH',
          'PROFILE_VIEW',
          'NEW_APPLICATION_RECEIVED',
          'INTERVIEW_PROPOSED',
          'INTERVIEW_ACCEPTED_BY_PRO',
          'INTERVIEW_REJECTED_BY_PRO',
          'INTERVIEW_RESCHEDULED_BY_PRO',
          'COLLABORATION_CONFIRMED',
          'GENERIC_INFO'
        ] &&
        // Validate boolean isRead (should be false on creation)
        request.resource.data.isRead == false &&
        // Validate string fields are non-empty
        request.resource.data.userId is string &&
        request.resource.data.userId.size() > 0 &&
        request.resource.data.type is string &&
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.message is string &&
        request.resource.data.message.size() > 0;

      // Delete: Not allowed for data retention compliance
      allow delete: if false;
    }
    
    // Audit logs - only system can write, only admin can read
    match /auditLogs/{logId} {
      allow read: if hasRole('admin');
      allow list: if hasRole('admin');
      // Allow system/authenticated users AND unauthenticated for security events to create audit logs
      allow create: if
        // Validate audit log structure
        request.resource.data.keys().hasAll(['action', 'severity', 'timestamp']) &&
        request.resource.data.action in [
          'LOGIN_SUCCESS', 'LOGIN_FAILED', 'LOGIN_RATE_LIMITED', 'LOGOUT', 'PASSWORD_RESET',
          'EMAIL_CHANGE_INITIATED', 'EMAIL_SYNC_COMPLETED', 'PROFILE_UPDATE',
          'FILE_UPLOAD', 'FILE_DELETE', 'PROJECT_CREATE', 'PROJECT_UPDATE', 'PROJECT_DELETE',
          'APPLICATION_SUBMIT', 'APPLICATION_UPDATE', 'ADMIN_ACTION', 'SECURITY_VIOLATION'
        ] &&
        request.resource.data.severity in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'] &&
        request.resource.data.timestamp == request.time;

      // No updates or deletes allowed for audit integrity
      allow update, delete: if false;
    }

    // Rate limiting collection - system managed
    match /rateLimits/{limitId} {
      // Allow authenticated users to read/write their own rate limit records
      // This is necessary for server-side rate limiting to work
      allow read, create, update: if isAuthenticated();

      // No delete allowed - records expire automatically
      allow delete: if hasRole('admin');
    }

    // Jobs collection with nested applications
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();

      allow create: if isAuthenticated() &&
        hasRole('company') &&
        request.resource.data.companyId == request.auth.uid;

      allow update: if isAuthenticated() &&
        (resource.data.companyId == request.auth.uid || hasRole('admin'));

      allow delete: if isAuthenticated() &&
        (resource.data.companyId == request.auth.uid || hasRole('admin'));

      // Nested applications subcollection
      match /applications/{applicationId} {
        // Read: Professional, company owner, or admin
        allow read: if isAuthenticated() &&
          (resource.data.professionalId == request.auth.uid ||
           resource.data.companyId == request.auth.uid ||
           hasRole('admin'));

        allow list: if isAuthenticated();

        // Create: Only professionals can apply
        allow create: if isAuthenticated() &&
          hasRole('professional') &&
          request.resource.data.professionalId == request.auth.uid;

        // Update: Professional, company, or admin
        allow update: if isAuthenticated() &&
          (resource.data.professionalId == request.auth.uid ||
           resource.data.companyId == request.auth.uid ||
           hasRole('admin'));

        // Delete: Company owner or admin
        allow delete: if isAuthenticated() &&
          (resource.data.companyId == request.auth.uid || hasRole('admin'));
      }
    }

    // Contracts collection - admin creates, parties can read
    match /contracts/{contractId} {
      // Read: Admin, or parties involved (professional/company)
      allow read: if isAuthenticated() &&
        (hasRole('admin') ||
         resource.data.professionalId == request.auth.uid ||
         resource.data.companyId == request.auth.uid);

      // List: Admin only (to prevent enumeration)
      allow list: if hasRole('admin');

      // Create: Admin only
      allow create: if hasRole('admin') &&
        request.resource.data.keys().hasAll([
          'jobId', 'applicationId', 'companyId', 'professionalId',
          'status', 'generatedText', 'generatedAt', 'generatedBy',
          'aiModel', 'aiPromptVersion', 'contractData', 'createdAt', 'updatedAt'
        ]) &&
        request.resource.data.status in ['DRAFT', 'GENERATED', 'PENDING_REVIEW', 'APPROVED', 'REJECTED', 'ARCHIVED'] &&
        request.resource.data.generatedBy == request.auth.uid;

      // Update: Admin only (for now)
      allow update: if hasRole('admin');

      // Delete: Admin only
      allow delete: if hasRole('admin');
    }

    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if hasRole('admin');
    }
  }
}