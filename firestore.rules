rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }
    
    // Users collection - enhanced security
    match /users/{userId} {
      allow read: if isOwner(userId);
      
      // Allow admin to read all user profiles
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow limited read access for marketplace (no sensitive data)
      allow read: if isAuthenticated() && 
        request.auth.uid != userId &&
        resource.data.role == 'professional';
      
      // Allow marketplace queries for professionals
      allow list: if isAuthenticated();
        
      allow create: if isOwner(userId) && 
        isValidEmail(request.resource.data.email) &&
        request.resource.data.role in ['professional', 'company', 'admin'] &&
        // Professional validation
        ((request.resource.data.role == 'professional' &&
          isValidString(request.resource.data.firstName, 2, 50) &&
          isValidString(request.resource.data.lastName, 2, 50)) ||
        // Company validation  
         (request.resource.data.role == 'company' &&
          isValidString(request.resource.data.companyName, 2, 100)) ||
        // Admin validation (can be either)
         (request.resource.data.role == 'admin'));
        
      allow update: if isOwner(userId) || hasRole('admin');
         
      allow delete: if hasRole('admin');
    }
    
    // Projects collection - enhanced validation  
    match /projects/{projectId} {
      allow read: if true; // Public read for SEO and metadata
      allow list: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.companyId == request.auth.uid;
        
      allow update: if isAuthenticated() && 
        resource.data.companyId == request.auth.uid &&
        // Prevent changing core fields
        request.resource.data.companyId == resource.data.companyId;
        
      allow delete: if isAuthenticated() && 
        resource.data.companyId == request.auth.uid;
    }
    
    // Project Applications collection - strict access control
    match /projectApplications/{applicationId} {
      allow read: if isAuthenticated() && 
        (resource.data.professionalId == request.auth.uid || 
         resource.data.companyId == request.auth.uid);
         
      allow list: if isAuthenticated();
         
      allow create: if isAuthenticated() && 
        request.resource.data.professionalId == request.auth.uid;
        
      allow update: if isAuthenticated() && 
        (resource.data.professionalId == request.auth.uid || 
         resource.data.companyId == request.auth.uid) &&
        // Prevent changing core identifiers
        request.resource.data.professionalId == resource.data.professionalId &&
        request.resource.data.companyId == resource.data.companyId &&
        request.resource.data.projectId == resource.data.projectId;
        
      allow delete: if isAuthenticated() && 
        resource.data.companyId == request.auth.uid;
    }
    
    // Notifications collection - strict user isolation
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
        
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.createdAt == request.time;
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if hasRole('admin');
    }
  }
}